##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.0.0] date: [Fri Jul 26 17:06:24 CST 2019]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = touchGFX_DEMO

######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = 


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources
# C_SOURCES =  $(shell find ./ -name '*.c')

C_SOURCES_DIR = BSP
C_SOURCES_DIR += Libraries/CMSIS/Device
C_SOURCES_DIR += Libraries/FatFS
C_SOURCES_DIR += Libraries/FreeRTOS
C_SOURCES_DIR += Libraries/STM32_USB_Host_Library
C_SOURCES_DIR += Libraries/STM32H7xx_HAL_Driver/Src
C_SOURCES_DIR += User/code/Src
C_SOURCES_DIR += User/TouchGFX/App

C_SOURCES := $(foreach dir,$(C_SOURCES_DIR),$(shell find $(dir) -name '*.c')) 

# ASM sources
ASM_SOURCES = startup_stm32h747xihx.s

#CPP soureces related

CPP_SOURCES_DIR = User/TouchGFX/generated/fonts/src
CPP_SOURCES_DIR += User/TouchGFX/generated/gui_generated/src
CPP_SOURCES_DIR += User/TouchGFX/generated/images/src
CPP_SOURCES_DIR += User/TouchGFX/generated/texts/src
CPP_SOURCES_DIR += User/TouchGFX/gui/src
CPP_SOURCES_DIR += User/TouchGFX/target

CPP_SOURCES := $(foreach dir,$(CPP_SOURCES_DIR),$(shell find $(dir) -name '*.cpp')) 

#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC  = $(GCC_PATH)/$(PREFIX)gcc
CPP = $(GCC_PATH)/$(PREFIX)g++
AS  = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP  = $(GCC_PATH)/$(PREFIX)objcopy
SZ  = $(GCC_PATH)/$(PREFIX)size
else
CC  = $(PREFIX)gcc
CPP = $(PREFIX)g++
AS  = $(PREFIX)gcc -x assembler-with-cpp
CP  = $(PREFIX)objcopy
SZ  = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m7

# fpu
FPU = -mfpu=fpv5-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =				\
-DUSE_HAL_DRIVER		\
-DSTM32H747xx			\
-DUSE_STM32H747I_DISCO	\
-DBSP_USE_CMSIS_OS		\
-DCORE_CM7				\
-DUSE_BPP=24			\
-DST					\
-DUSE_FLOATING_POINT	\
-DUSE_USB_HS			\
-DUSE_PWR_LDO_SUPPLY__N	\

# AS includes
AS_INCLUDES = 

# C includes
INC := $(shell find ./ -type d)
C_INCLUDES =  $(addprefix -I, $(INC))

# CPP includes
CPP_INCLUDES = $(C_INCLUDES)

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -w -fdata-sections -ffunction-sections 

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -w -fdata-sections -ffunction-sections
CFLAGS += --specs=nosys.specs

CPPFLAGS = $(MCU) $(C_DEFS) $(CPP_INCLUDES) $(OPT) -w -fdata-sections -ffunction-sections -std=gnu++14 -fno-rtti
CPPFLAGS += --specs=nosys.specs

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif

# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

CPPFLAGS += -g -gdwarf-2
CPPFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32H747XIHX_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys
LIBS += Libraries/Touchgfx/lib/core/cortex_m7/gcc/libtouchgfx-float-abi-hard.a
LIBS += Libraries/CMSIS/DSP/Lib/GCC/libarm_cortexM7lfdp_math.a
LIBDIR =

LDFLAGS = $(MCU) -specs=nano.specs -specs=nosys.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections 
LDFLAGS += -u _printf_float -std=gnu++14 -fno-rtti -lstdc++ -lsupc++ -static
# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))

# list of c++ objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(CPP_SOURCES:.cpp=.o)))
vpath %.cpp $(sort $(dir $(CPP_SOURCES)))

# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	@echo "CC $<" 
	@$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.cpp Makefile | $(BUILD_DIR) 
	@echo "CPP $<" 
	@$(CPP) -c $(CPPFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.cpp=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	@echo "AS $<" 
	@$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	@echo "Link all objects ..." 
	@$(CPP) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***